'use server';
/**
 * @fileOverview An AI chatbot for investment advice based on a pitch deck analysis and VC persona.
 *
 * - getInvestmentAdvice - A function that provides investment advice based on the analysis and persona.
 * - InvestmentAdviceInput - The input type for the getInvestmentAdvice function.
 * - InvestmentAdviceOutput - The return type for the getInvestmentAdvice function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const InvestmentAdviceInputSchema = z.object({
  analysis: z.string().describe('The full JSON analysis result of the pitch deck.'),
  persona: z.string().describe('The VC persona used for the analysis (e.g., SaaS VC).'),
  question: z.string().describe('The user question or prompt for investment advice.'),
  founderResponses: z.string().optional().describe('The founder responses to initial questions'),
});
export type InvestmentAdviceInput = z.infer<typeof InvestmentAdviceInputSchema>;

const InvestmentAdviceOutputSchema = z.object({
  advice: z.string().describe('The investment advice generated by the AI chatbot.'),
});
export type InvestmentAdviceOutput = z.infer<typeof InvestmentAdviceOutputSchema>;

export async function getInvestmentAdvice(input: InvestmentAdviceInput): Promise<InvestmentAdviceOutput> {
  return investmentAdviceFlow(input);
}

const prompt = ai.definePrompt({
  name: 'investmentAdvicePrompt',
  input: {schema: InvestmentAdviceInputSchema},
  output: {schema: InvestmentAdviceOutputSchema},
  prompt: `You are an expert AI assistant for a startup analyst acting with the persona of a {{{persona}}}. Your role is to answer questions based *only* on the provided pitch deck analysis and founder responses. Do not hallucinate or invent information not present in the provided context.

Pitch Deck Analysis: {{{analysis}}}

{{#if founderResponses}}
Founder Responses: {{{founderResponses}}}
{{/if}}

Question: {{{question}}}

Provide your investment advice:
`,
});

const investmentAdviceFlow = ai.defineFlow(
  {
    name: 'investmentAdviceFlow',
    inputSchema: InvestmentAdviceInputSchema,
    outputSchema: InvestmentAdviceOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
